# doctest in 1-matrix_divided.py

This library contains a single function called ``matrix_divided`` which
returns the matrix divided by a given number.

A matrix of numbers only with equal row size
============================================

``matrix_divided()`` returns a new matrix containing each element of the original
matrix divided by a given number

::
	>>> matrix_divided = __import__('2-matrix_divided').matrix_divided
	>>> matrix_divided([[1, 2, 3], [4, 5, 6]], 3)
	[[0.33, 0.67, 1.0], [1.33, 1.67, 2.0]]

A matrix containing non numbers
===============================

``matrix_divided()``  raise a TypeError exception
with the message matrix must be a matrix (list of lists) of integers/floats

::
	>>> matrix_divided([[1, 2, 3], [4, "yes", "now"]], 2)
	Traceback (most recent call last):
		...
	TypeError: matrix must be a matrix (list of lists) of integers/floats

A matrix containing rows of different sizes
===========================================

``matrix_divided()`` raise a TypeError exception with the message 
"Each row of the matrix must have the same size"

::
	>>> matrix_divided([[1, 2, 3], [4, 5, 6, 7]], 4)
	Traceback (most recent call last):
		...
	TypeError: Each row of the matrix must have the same size

``div`` must be an integer or float
===================================

``matrix_divided`` aise a TypeError exception with the message
"div must be a number"

::
	>>> matrix_divided([[1, 2, 3], [4, 5, 6]], "div")
	Traceback (most recent call last):
		...
	TypeError: div must be a number

``div`` can't be equal 0
========================

``matrix_divided()`` raise a ZeroDivisionError exception with the message division by zero

::
	>>> matrix_divided([[1, 2, 3], [4, 5, 6]], 0)
	Traceback (most recent call last):
		...
	ZeroDivisionError: division by zero

